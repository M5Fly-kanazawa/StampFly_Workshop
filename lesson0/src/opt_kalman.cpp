#include "Opt_kalman.hpp"
#include <math.h>
#include <Arduino.h>

void Opt_kalman::update(float *accel, float *euler, float *observation, float h)
{
  //加速度センサ値
  asx =  accel[0]*9.80665;
  asy =  accel[1]*9.80665;
  asz =  accel[2]*9.80665;

  //DCM取得
  float s_phi, s_tht, s_psi;
  float c_phi, c_tht, c_psi;

  float phi = euler[0];
  float tht = euler[1];
  float psi = euler[2];

  s_phi = sin(phi);
  s_tht = sin(tht);
  s_psi = sin(psi);

  c_phi = cos(phi);
  c_tht = cos(tht);
  c_psi = cos(psi);
  
  r11 = c_tht*c_psi;
  r12 = s_phi*s_tht*c_psi - c_phi*s_psi;
  r13 = c_phi*s_tht*c_psi + s_phi*s_psi;

  r21 = c_tht*s_psi;
  r22 = s_phi*s_tht*s_psi + c_phi*c_psi;
  r23 = c_phi*s_tht*s_psi - s_phi*c_psi;

  r31 = -s_tht;
  r32 =  s_phi*c_tht;
  r33 =  c_phi*c_tht;

  //観測量取得
  z1 = observation[0];
  z2 = observation[1];
  z3 = -observation[2];
  
  //予測更新(状態)
  _x1 = asx*h - h*x7 + x1;
  _x2 = asy*h - h*x8 + x2;
  _x3 = asz*h - h*x9 + x3;
  _x4 = h*r11*x1 + h*r12*x2 + h*r13*x3 + x4;
  _x5 = h*r21*x1 + h*r22*x2 + h*r23*x3 + x5;
  _x6 = h*r31*x1 + h*r32*x2 + h*r33*x3 + x6;
  _x7 = x7*(beta_x*h + 1);
  _x8 = x8*(beta_y*h + 1);
  _x9 = x9*(beta_z*h + 1);  
  //予測更新(誤差共分散)
  _p11 = h*h*q1 - h*p71 - h*(-h*p77 + p17) + p11;
  _p12 = -h*p72 - h*(-h*p78 + p18) + p12;
  _p13 = -h*p73 - h*(-h*p79 + p19) + p13;
  _p14 = -h*p74 + h*r11*(-h*p71 + p11) + h*r12*(-h*p72 + p12) + h*r13*(-h*p73 + p13) + p14;
  _p15 = -h*p75 + h*r21*(-h*p71 + p11) + h*r22*(-h*p72 + p12) + h*r23*(-h*p73 + p13) + p15;
  _p16 = -h*p76 + h*r31*(-h*p71 + p11) + h*r32*(-h*p72 + p12) + h*r33*(-h*p73 + p13) + p16;
  _p17 = (beta_x*h + 1)*(-h*p77 + p17);
  _p18 = (beta_y*h + 1)*(-h*p78 + p18);
  _p19 = (beta_z*h + 1)*(-h*p79 + p19);
  _p21 = -h*p81 - h*(-h*p87 + p27) + p21;
  _p22 = h*h*q1 - h*p82 - h*(-h*p88 + p28) + p22;
  _p23 = -h*p83 - h*(-h*p89 + p29) + p23;
  _p24 = -h*p84 + h*r11*(-h*p81 + p21) + h*r12*(-h*p82 + p22) + h*r13*(-h*p83 + p23) + p24;
  _p25 = -h*p85 + h*r21*(-h*p81 + p21) + h*r22*(-h*p82 + p22) + h*r23*(-h*p83 + p23) + p25;
  _p26 = -h*p86 + h*r31*(-h*p81 + p21) + h*r32*(-h*p82 + p22) + h*r33*(-h*p83 + p23) + p26;
  _p27 = (beta_x*h + 1)*(-h*p87 + p27);
  _p28 = (beta_y*h + 1)*(-h*p88 + p28);
  _p29 = (beta_z*h + 1)*(-h*p89 + p29);
  _p31 = -h*p91 - h*(-h*p97 + p37) + p31;
  _p32 = -h*p92 - h*(-h*p98 + p38) + p32;
  _p33 = h*h*q3 - h*p93 - h*(-h*p99 + p39) + p33;
  _p34 = -h*p94 + h*r11*(-h*p91 + p31) + h*r12*(-h*p92 + p32) + h*r13*(-h*p93 + p33) + p34;
  _p35 = -h*p95 + h*r21*(-h*p91 + p31) + h*r22*(-h*p92 + p32) + h*r23*(-h*p93 + p33) + p35;
  _p36 = -h*p96 + h*r31*(-h*p91 + p31) + h*r32*(-h*p92 + p32) + h*r33*(-h*p93 + p33) + p36;
  _p37 = (beta_x*h + 1)*(-h*p97 + p37);
  _p38 = (beta_y*h + 1)*(-h*p98 + p38);
  _p39 = (beta_z*h + 1)*(-h*p99 + p39);
  _p41 = h*p11*r11 + h*p21*r12 + h*p31*r13 - h*(h*p17*r11 + h*p27*r12 + h*p37*r13 + p47) + p41;
  _p42 = h*p12*r11 + h*p22*r12 + h*p32*r13 - h*(h*p18*r11 + h*p28*r12 + h*p38*r13 + p48) + p42;
  _p43 = h*p13*r11 + h*p23*r12 + h*p33*r13 - h*(h*p19*r11 + h*p29*r12 + h*p39*r13 + p49) + p43;
  _p44 = h*p14*r11 + h*p24*r12 + h*p34*r13 + h*r11*(h*p11*r11 + h*p21*r12 + h*p31*r13 + p41) + h*r12*(h*p12*r11 + h*p22*r12 + h*p32*r13 + p42) + h*r13*(h*p13*r11 + h*p23*r12 + h*p33*r13 + p43) + p44;
  _p45 = h*p15*r11 + h*p25*r12 + h*p35*r13 + h*r21*(h*p11*r11 + h*p21*r12 + h*p31*r13 + p41) + h*r22*(h*p12*r11 + h*p22*r12 + h*p32*r13 + p42) + h*r23*(h*p13*r11 + h*p23*r12 + h*p33*r13 + p43) + p45;
  _p46 = h*p16*r11 + h*p26*r12 + h*p36*r13 + h*r31*(h*p11*r11 + h*p21*r12 + h*p31*r13 + p41) + h*r32*(h*p12*r11 + h*p22*r12 + h*p32*r13 + p42) + h*r33*(h*p13*r11 + h*p23*r12 + h*p33*r13 + p43) + p46;
  _p47 = (beta_x*h + 1)*(h*p17*r11 + h*p27*r12 + h*p37*r13 + p47);
  _p48 = (beta_y*h + 1)*(h*p18*r11 + h*p28*r12 + h*p38*r13 + p48);
  _p49 = (beta_z*h + 1)*(h*p19*r11 + h*p29*r12 + h*p39*r13 + p49);
  _p51 = h*p11*r21 + h*p21*r22 + h*p31*r23 - h*(h*p17*r21 + h*p27*r22 + h*p37*r23 + p57) + p51;
  _p52 = h*p12*r21 + h*p22*r22 + h*p32*r23 - h*(h*p18*r21 + h*p28*r22 + h*p38*r23 + p58) + p52;
  _p53 = h*p13*r21 + h*p23*r22 + h*p33*r23 - h*(h*p19*r21 + h*p29*r22 + h*p39*r23 + p59) + p53;
  _p54 = h*p14*r21 + h*p24*r22 + h*p34*r23 + h*r11*(h*p11*r21 + h*p21*r22 + h*p31*r23 + p51) + h*r12*(h*p12*r21 + h*p22*r22 + h*p32*r23 + p52) + h*r13*(h*p13*r21 + h*p23*r22 + h*p33*r23 + p53) + p54;
  _p55 = h*p15*r21 + h*p25*r22 + h*p35*r23 + h*r21*(h*p11*r21 + h*p21*r22 + h*p31*r23 + p51) + h*r22*(h*p12*r21 + h*p22*r22 + h*p32*r23 + p52) + h*r23*(h*p13*r21 + h*p23*r22 + h*p33*r23 + p53) + p55;
  _p56 = h*p16*r21 + h*p26*r22 + h*p36*r23 + h*r31*(h*p11*r21 + h*p21*r22 + h*p31*r23 + p51) + h*r32*(h*p12*r21 + h*p22*r22 + h*p32*r23 + p52) + h*r33*(h*p13*r21 + h*p23*r22 + h*p33*r23 + p53) + p56;
  _p57 = (beta_x*h + 1)*(h*p17*r21 + h*p27*r22 + h*p37*r23 + p57);
  _p58 = (beta_y*h + 1)*(h*p18*r21 + h*p28*r22 + h*p38*r23 + p58);
  _p59 = (beta_z*h + 1)*(h*p19*r21 + h*p29*r22 + h*p39*r23 + p59);
  _p61 = h*p11*r31 + h*p21*r32 + h*p31*r33 - h*(h*p17*r31 + h*p27*r32 + h*p37*r33 + p67) + p61;
  _p62 = h*p12*r31 + h*p22*r32 + h*p32*r33 - h*(h*p18*r31 + h*p28*r32 + h*p38*r33 + p68) + p62;
  _p63 = h*p13*r31 + h*p23*r32 + h*p33*r33 - h*(h*p19*r31 + h*p29*r32 + h*p39*r33 + p69) + p63;
  _p64 = h*p14*r31 + h*p24*r32 + h*p34*r33 + h*r11*(h*p11*r31 + h*p21*r32 + h*p31*r33 + p61) + h*r12*(h*p12*r31 + h*p22*r32 + h*p32*r33 + p62) + h*r13*(h*p13*r31 + h*p23*r32 + h*p33*r33 + p63) + p64;
  _p65 = h*p15*r31 + h*p25*r32 + h*p35*r33 + h*r21*(h*p11*r31 + h*p21*r32 + h*p31*r33 + p61) + h*r22*(h*p12*r31 + h*p22*r32 + h*p32*r33 + p62) + h*r23*(h*p13*r31 + h*p23*r32 + h*p33*r33 + p63) + p65;
  _p66 = h*p16*r31 + h*p26*r32 + h*p36*r33 + h*r31*(h*p11*r31 + h*p21*r32 + h*p31*r33 + p61) + h*r32*(h*p12*r31 + h*p22*r32 + h*p32*r33 + p62) + h*r33*(h*p13*r31 + h*p23*r32 + h*p33*r33 + p63) + p66;
  _p67 = (beta_x*h + 1)*(h*p17*r31 + h*p27*r32 + h*p37*r33 + p67);
  _p68 = (beta_y*h + 1)*(h*p18*r31 + h*p28*r32 + h*p38*r33 + p68);
  _p69 = (beta_z*h + 1)*(h*p19*r31 + h*p29*r32 + h*p39*r33 + p69);
  _p71 = -h*p77*(beta_x*h + 1) + p71*(beta_x*h + 1);
  _p72 = -h*p78*(beta_x*h + 1) + p72*(beta_x*h + 1);
  _p73 = -h*p79*(beta_x*h + 1) + p73*(beta_x*h + 1);
  _p74 = h*p71*r11*(beta_x*h + 1) + h*p72*r12*(beta_x*h + 1) + h*p73*r13*(beta_x*h + 1) + p74*(beta_x*h + 1);
  _p75 = h*p71*r21*(beta_x*h + 1) + h*p72*r22*(beta_x*h + 1) + h*p73*r23*(beta_x*h + 1) + p75*(beta_x*h + 1);
  _p76 = h*p71*r31*(beta_x*h + 1) + h*p72*r32*(beta_x*h + 1) + h*p73*r33*(beta_x*h + 1) + p76*(beta_x*h + 1);
  _p77 = p77*(beta_x*h + 1)*(beta_x*h + 1);
  _p78 = p78*(beta_x*h + 1)*(beta_y*h + 1);
  _p79 = p79*(beta_x*h + 1)*(beta_z*h + 1);
  _p81 = -h*p87*(beta_y*h + 1) + p81*(beta_y*h + 1);
  _p82 = -h*p88*(beta_y*h + 1) + p82*(beta_y*h + 1);
  _p83 = -h*p89*(beta_y*h + 1) + p83*(beta_y*h + 1);
  _p84 = h*p81*r11*(beta_y*h + 1) + h*p82*r12*(beta_y*h + 1) + h*p83*r13*(beta_y*h + 1) + p84*(beta_y*h + 1);
  _p85 = h*p81*r21*(beta_y*h + 1) + h*p82*r22*(beta_y*h + 1) + h*p83*r23*(beta_y*h + 1) + p85*(beta_y*h + 1);
  _p86 = h*p81*r31*(beta_y*h + 1) + h*p82*r32*(beta_y*h + 1) + h*p83*r33*(beta_y*h + 1) + p86*(beta_y*h + 1);
  _p87 = p87*(beta_x*h + 1)*(beta_y*h + 1);
  _p88 = p88*(beta_y*h + 1)*(beta_y*h + 1);
  _p89 = p89*(beta_y*h + 1)*(beta_z*h + 1);
  _p91 = -h*p97*(beta_z*h + 1) + p91*(beta_z*h + 1);
  _p92 = -h*p98*(beta_z*h + 1) + p92*(beta_z*h + 1);
  _p93 = -h*p99*(beta_z*h + 1) + p93*(beta_z*h + 1);
  _p94 = h*p91*r11*(beta_z*h + 1) + h*p92*r12*(beta_z*h + 1) + h*p93*r13*(beta_z*h + 1) + p94*(beta_z*h + 1);
  _p95 = h*p91*r21*(beta_z*h + 1) + h*p92*r22*(beta_z*h + 1) + h*p93*r23*(beta_z*h + 1) + p95*(beta_z*h + 1);
  _p96 = h*p91*r31*(beta_z*h + 1) + h*p92*r32*(beta_z*h + 1) + h*p93*r33*(beta_z*h + 1) + p96*(beta_z*h + 1);
  _p97 = p97*(beta_x*h + 1)*(beta_z*h + 1);
  _p98 = p98*(beta_y*h + 1)*(beta_z*h + 1);
  _p99 = p99*(beta_z*h + 1)*(beta_z*h + 1);

  //カルマンゲイン更新
  s11 = _p11 + r1;
  s12 = _p12;
  s13 = _p16/r33;
  s21 = _p21;
  s22 = _p22 + r2;
  s23 = _p26/r33;
  s31 = _p61/r33;
  s32 = _p62/r33;
  s33 = _p66/(r33*r33) + r3;

  si11 = (s22*s33 - s23*s32)/(s11*s22*s33 - s11*s23*s32 - s12*s21*s33 + s12*s23*s31 + s13*s21*s32 - s13*s22*s31);
  si12 = (-s12*s33 + s13*s32)/(s11*s22*s33 - s11*s23*s32 - s12*s21*s33 + s12*s23*s31 + s13*s21*s32 - s13*s22*s31);
  si13 = (s12*s23 - s13*s22)/(s11*s22*s33 - s11*s23*s32 - s12*s21*s33 + s12*s23*s31 + s13*s21*s32 - s13*s22*s31);
  si21 = (-s21*s33 + s23*s31)/(s11*s22*s33 - s11*s23*s32 - s12*s21*s33 + s12*s23*s31 + s13*s21*s32 - s13*s22*s31);
  si22 = (s11*s33 - s13*s31)/(s11*s22*s33 - s11*s23*s32 - s12*s21*s33 + s12*s23*s31 + s13*s21*s32 - s13*s22*s31);
  si23 = (-s11*s23 + s13*s21)/(s11*s22*s33 - s11*s23*s32 - s12*s21*s33 + s12*s23*s31 + s13*s21*s32 - s13*s22*s31);
  si31 = (s21*s32 - s22*s31)/(s11*s22*s33 - s11*s23*s32 - s12*s21*s33 + s12*s23*s31 + s13*s21*s32 - s13*s22*s31);
  si32 = (-s11*s32 + s12*s31)/(s11*s22*s33 - s11*s23*s32 - s12*s21*s33 + s12*s23*s31 + s13*s21*s32 - s13*s22*s31);
  si33 = (s11*s22 - s12*s21)/(s11*s22*s33 - s11*s23*s32 - s12*s21*s33 + s12*s23*s31 + s13*s21*s32 - s13*s22*s31);

  k11 = _p11*si11 + _p12*si21 + _p16*si31/r33;
  k12 = _p11*si12 + _p12*si22 + _p16*si32/r33;
  k13 = _p11*si13 + _p12*si23 + _p16*si33/r33;
  k21 = _p21*si11 + _p22*si21 + _p26*si31/r33;
  k22 = _p21*si12 + _p22*si22 + _p26*si32/r33;
  k23 = _p21*si13 + _p22*si23 + _p26*si33/r33;
  k31 = _p31*si11 + _p32*si21 + _p36*si31/r33;
  k32 = _p31*si12 + _p32*si22 + _p36*si32/r33;
  k33 = _p31*si13 + _p32*si23 + _p36*si33/r33;
  k41 = _p41*si11 + _p42*si21 + _p46*si31/r33;
  k42 = _p41*si12 + _p42*si22 + _p46*si32/r33;
  k43 = _p41*si13 + _p42*si23 + _p46*si33/r33;
  k51 = _p51*si11 + _p52*si21 + _p56*si31/r33;
  k52 = _p51*si12 + _p52*si22 + _p56*si32/r33;
  k53 = _p51*si13 + _p52*si23 + _p56*si33/r33;
  k61 = _p61*si11 + _p62*si21 + _p66*si31/r33;
  k62 = _p61*si12 + _p62*si22 + _p66*si32/r33;
  k63 = _p61*si13 + _p62*si23 + _p66*si33/r33;
  k71 = _p71*si11 + _p72*si21 + _p76*si31/r33;
  k72 = _p71*si12 + _p72*si22 + _p76*si32/r33;
  k73 = _p71*si13 + _p72*si23 + _p76*si33/r33;
  k81 = _p81*si11 + _p82*si21 + _p86*si31/r33;
  k82 = _p81*si12 + _p82*si22 + _p86*si32/r33;
  k83 = _p81*si13 + _p82*si23 + _p86*si33/r33;
  k91 = _p91*si11 + _p92*si21 + _p96*si31/r33;
  k92 = _p91*si12 + _p92*si22 + _p96*si32/r33;
  k93 = _p91*si13 + _p92*si23 + _p96*si33/r33;

  //イノベーション取得
  e1 = z1 - x1;
  e2 = z2 - x2;
  e3 = z3 - x6/r33;

  //観測更新(状態)
  x1 = _x1 + e1*k11 + e2*k12 + e3*k13;
  x2 = _x2 + e1*k21 + e2*k22 + e3*k23;
  x3 = _x3 + e1*k31 + e2*k32 + e3*k33;
  x4 = _x4 + e1*k41 + e2*k42 + e3*k43;
  x5 = _x5 + e1*k51 + e2*k52 + e3*k53;
  x6 = _x6 + e1*k61 + e2*k62 + e3*k63;
  x7 = _x7 + e1*k71 + e2*k72 + e3*k73;
  x8 = _x8 + e1*k81 + e2*k82 + e3*k83;
  x9 = _x9 + e1*k91 + e2*k92 + e3*k93;
  //観測更新(誤差共分散)
  p11 = _p11*(1 - k11) - _p21*k12 - _p61*k13/r33;
  p12 = _p12*(1 - k11) - _p22*k12 - _p62*k13/r33;
  p13 = _p13*(1 - k11) - _p23*k12 - _p63*k13/r33;
  p14 = _p14*(1 - k11) - _p24*k12 - _p64*k13/r33;
  p15 = _p15*(1 - k11) - _p25*k12 - _p65*k13/r33;
  p16 = _p16*(1 - k11) - _p26*k12 - _p66*k13/r33;
  p17 = _p17*(1 - k11) - _p27*k12 - _p67*k13/r33;
  p18 = _p18*(1 - k11) - _p28*k12 - _p68*k13/r33;
  p19 = _p19*(1 - k11) - _p29*k12 - _p69*k13/r33;
  p21 = -_p11*k21 + _p21*(1 - k22) - _p61*k23/r33;
  p22 = -_p12*k21 + _p22*(1 - k22) - _p62*k23/r33;
  p23 = -_p13*k21 + _p23*(1 - k22) - _p63*k23/r33;
  p24 = -_p14*k21 + _p24*(1 - k22) - _p64*k23/r33;
  p25 = -_p15*k21 + _p25*(1 - k22) - _p65*k23/r33;
  p26 = -_p16*k21 + _p26*(1 - k22) - _p66*k23/r33;
  p27 = -_p17*k21 + _p27*(1 - k22) - _p67*k23/r33;
  p28 = -_p18*k21 + _p28*(1 - k22) - _p68*k23/r33;
  p29 = -_p19*k21 + _p29*(1 - k22) - _p69*k23/r33;
  p31 = -_p11*k31 - _p21*k32 + _p31 - _p61*k33/r33;
  p32 = -_p12*k31 - _p22*k32 + _p32 - _p62*k33/r33;
  p33 = -_p13*k31 - _p23*k32 + _p33 - _p63*k33/r33;
  p34 = -_p14*k31 - _p24*k32 + _p34 - _p64*k33/r33;
  p35 = -_p15*k31 - _p25*k32 + _p35 - _p65*k33/r33;
  p36 = -_p16*k31 - _p26*k32 + _p36 - _p66*k33/r33;
  p37 = -_p17*k31 - _p27*k32 + _p37 - _p67*k33/r33;
  p38 = -_p18*k31 - _p28*k32 + _p38 - _p68*k33/r33;
  p39 = -_p19*k31 - _p29*k32 + _p39 - _p69*k33/r33;
  p41 = -_p11*k41 - _p21*k42 + _p41 - _p61*k43/r33;
  p42 = -_p12*k41 - _p22*k42 + _p42 - _p62*k43/r33;
  p43 = -_p13*k41 - _p23*k42 + _p43 - _p63*k43/r33;
  p44 = -_p14*k41 - _p24*k42 + _p44 - _p64*k43/r33;
  p45 = -_p15*k41 - _p25*k42 + _p45 - _p65*k43/r33;
  p46 = -_p16*k41 - _p26*k42 + _p46 - _p66*k43/r33;
  p47 = -_p17*k41 - _p27*k42 + _p47 - _p67*k43/r33;
  p48 = -_p18*k41 - _p28*k42 + _p48 - _p68*k43/r33;
  p49 = -_p19*k41 - _p29*k42 + _p49 - _p69*k43/r33;
  p51 = -_p11*k51 - _p21*k52 + _p51 - _p61*k53/r33;
  p52 = -_p12*k51 - _p22*k52 + _p52 - _p62*k53/r33;
  p53 = -_p13*k51 - _p23*k52 + _p53 - _p63*k53/r33;
  p54 = -_p14*k51 - _p24*k52 + _p54 - _p64*k53/r33;
  p55 = -_p15*k51 - _p25*k52 + _p55 - _p65*k53/r33;
  p56 = -_p16*k51 - _p26*k52 + _p56 - _p66*k53/r33;
  p57 = -_p17*k51 - _p27*k52 + _p57 - _p67*k53/r33;
  p58 = -_p18*k51 - _p28*k52 + _p58 - _p68*k53/r33;
  p59 = -_p19*k51 - _p29*k52 + _p59 - _p69*k53/r33;
  p61 = -_p11*k61 - _p21*k62 + _p61*(-k63/r33 + 1);
  p62 = -_p12*k61 - _p22*k62 + _p62*(-k63/r33 + 1);
  p63 = -_p13*k61 - _p23*k62 + _p63*(-k63/r33 + 1);
  p64 = -_p14*k61 - _p24*k62 + _p64*(-k63/r33 + 1);
  p65 = -_p15*k61 - _p25*k62 + _p65*(-k63/r33 + 1);
  p66 = -_p16*k61 - _p26*k62 + _p66*(-k63/r33 + 1);
  p67 = -_p17*k61 - _p27*k62 + _p67*(-k63/r33 + 1);
  p68 = -_p18*k61 - _p28*k62 + _p68*(-k63/r33 + 1);
  p69 = -_p19*k61 - _p29*k62 + _p69*(-k63/r33 + 1);
  p71 = -_p11*k71 - _p21*k72 - _p61*k73/r33 + _p71;
  p72 = -_p12*k71 - _p22*k72 - _p62*k73/r33 + _p72;
  p73 = -_p13*k71 - _p23*k72 - _p63*k73/r33 + _p73;
  p74 = -_p14*k71 - _p24*k72 - _p64*k73/r33 + _p74;
  p75 = -_p15*k71 - _p25*k72 - _p65*k73/r33 + _p75;
  p76 = -_p16*k71 - _p26*k72 - _p66*k73/r33 + _p76;
  p77 = -_p17*k71 - _p27*k72 - _p67*k73/r33 + _p77;
  p78 = -_p18*k71 - _p28*k72 - _p68*k73/r33 + _p78;
  p79 = -_p19*k71 - _p29*k72 - _p69*k73/r33 + _p79;
  p81 = -_p11*k81 - _p21*k82 - _p61*k83/r33 + _p81;
  p82 = -_p12*k81 - _p22*k82 - _p62*k83/r33 + _p82;
  p83 = -_p13*k81 - _p23*k82 - _p63*k83/r33 + _p83;
  p84 = -_p14*k81 - _p24*k82 - _p64*k83/r33 + _p84;
  p85 = -_p15*k81 - _p25*k82 - _p65*k83/r33 + _p85;
  p86 = -_p16*k81 - _p26*k82 - _p66*k83/r33 + _p86;
  p87 = -_p17*k81 - _p27*k82 - _p67*k83/r33 + _p87;
  p88 = -_p18*k81 - _p28*k82 - _p68*k83/r33 + _p88;
  p89 = -_p19*k81 - _p29*k82 - _p69*k83/r33 + _p89;
  p91 = -_p11*k91 - _p21*k92 - _p61*k93/r33 + _p91;
  p92 = -_p12*k91 - _p22*k92 - _p62*k93/r33 + _p92;
  p93 = -_p13*k91 - _p23*k92 - _p63*k93/r33 + _p93;
  p94 = -_p14*k91 - _p24*k92 - _p64*k93/r33 + _p94;
  p95 = -_p15*k91 - _p25*k92 - _p65*k93/r33 + _p95;
  p96 = -_p16*k91 - _p26*k92 - _p66*k93/r33 + _p96;
  p97 = -_p17*k91 - _p27*k92 - _p67*k93/r33 + _p97;
  p98 = -_p18*k91 - _p28*k92 - _p68*k93/r33 + _p98;
  p99 = -_p19*k91 - _p29*k92 - _p69*k93/r33 + _p99;

  kalman_time = kalman_time + h;
  //USBSerial.printf("%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f\n\r", kalman_time, h, x1, x2, x3, x4, x5, x6, x7, x8, x9, z1, z2, z3, psi);

}

void Opt_kalman::set_state(float* state)
{
  x1=state[0];
  x2=state[1];
  x3=state[2];
  x4=state[3];
  x5=state[4];
  x6=state[5];
  x7=state[6];
  x8=state[7];
  x9=state[8];
}


void Opt_kalman::get_state(float* state)
{
  state[0]=x1;
  state[1]=x2;
  state[2]=x3;
  state[3]=x4;
  state[4]=x5;
  state[5]=x6;
  state[6]=x7;
  state[7]=x8;
  state[8]=x9;
}

Opt_kalman::Opt_kalman()
{
  //h =0.0025;
  //状態初期化
  x1 = 0.0;
  x2 = 0.0;
  x3 = 0.0;
  x4 = 0.0;
  x5 = 0.0;
  x6 = 0.0;
  x7 = 0.0;
  x8 = 0.0;
  x9 = 0.0;
  //誤差共分散初期化
  p11 = 100.0;p12 =   0.0;p13 =   0.0;p14 =   0.0;p15 =   0.0;p16 =   0.0;p17 =   0.0;p18 =   0.0;p19 =   0.0;
  p21 =   0.0;p22 = 100.0;p23 =   0.0;p24 =   0.0;p25 =   0.0;p26 =   0.0;p27 =   0.0;p28 =   0.0;p29 =   0.0;
  p31 =   0.0;p32 =   0.0;p33 = 100.0;p34 =   0.0;p35 =   0.0;p36 =   0.0;p37 =   0.0;p38 =   0.0;p39 =   0.0;
  p41 =   0.0;p42 =   0.0;p43 =   0.0;p44 = 100.0;p45 =   0.0;p46 =   0.0;p47 =   0.0;p48 =   0.0;p49 =   0.0;
  p51 =   0.0;p52 =   0.0;p53 =   0.0;p54 =   0.0;p55 = 100.0;p56 =   0.0;p57 =   0.0;p58 =   0.0;p59 =   0.0;
  p61 =   0.0;p62 =   0.0;p63 =   0.0;p64 =   0.0;p65 =   0.0;p66 = 100.0;p67 =   0.0;p68 =   0.0;p69 =   0.0;
  p71 =   0.0;p72 =   0.0;p73 =   0.0;p74 =   0.0;p75 =   0.0;p76 =   0.0;p77 = 100.0;p78 =   0.0;p79 =   0.0;
  p81 =   0.0;p82 =   0.0;p83 =   0.0;p84 =   0.0;p85 =   0.0;p86 =   0.0;p87 =   0.0;p88 = 100.0;p89 =   0.0;
  p91 =   0.0;p92 =   0.0;p93 =   0.0;p94 =   0.0;p95 =   0.0;p96 =   0.0;p97 =   0.0;p98 =   0.0;p99 = 100.0;

  //バイアスシステム係数
  beta_x = -0.0001;
  beta_y = -0.0001;
  beta_z = -0.0001;
  //システムノイズ分散
  q1=1.0*1.0;
  q2=1.0*1.0;
  q3=1.0*1.0;
  //観測ノイズ分散
  r1=0.004*0.004;
  r2=0.004*0.004;
  r3=0.004*0.004;

  kalman_time = 0.0;
}